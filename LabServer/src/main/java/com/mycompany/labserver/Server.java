/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.labserver;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author verba
 */
public class Server extends javax.swing.JFrame {

    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
    }
    private static Socket clientSocket1; //сокет для общения
    private static Socket clientSocket2; //сокет для общения
    private static ServerSocket server; // серверсокет
    private static BufferedReader in_1; // поток чтения из сокета
    private static BufferedWriter out_1; // поток записи в сокет
    private static BufferedReader in_2; // поток чтения из сокета
    private static BufferedWriter out_2; // поток записи в сокет
    private boolean stepOnePlayer = true;
    private boolean stepTwoPlayer = false;

    Thread thread = new Thread() {
            @Override
            public void run() {  
                try {
                
                server = new ServerSocket(4004); // серверсокет прослушивает порт 4004
                    try {
                        sleep(1);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                    }
                jTextArea1.append("Сервер запущен!\n");
                clientSocket1 = server.accept();
                jTextArea1.append("Клиент 1 подключен!\n");
                clientSocket2 = server.accept();
                jTextArea1.append("Клиент 2 подключен!\n");
                in_1 = new BufferedReader(new InputStreamReader(clientSocket1.getInputStream()));
                out_1 = new BufferedWriter(new OutputStreamWriter(clientSocket1.getOutputStream()));
                in_2 = new BufferedReader(new InputStreamReader(clientSocket2.getInputStream()));
                out_2 = new BufferedWriter(new OutputStreamWriter(clientSocket2.getOutputStream()));
                
                send_1("player1");
                send_2("player2");

                while (true){
                    if (stepOnePlayer){
                    String word = in_1.readLine(); // ждём пока клиент что-нибудь нам напишет
                    if ("exit".equals(word)){
                        jTextArea1.append("Клиенты отключились!\n");
                        clientSocket1.close();
                        in_1.close();
                        out_1.close();
                        clientSocket2.close();
                        in_2.close();
                        out_2.close(); 
                        break;
                    }
                
                    send_2(word);
                    stepOnePlayer = false;
                    stepTwoPlayer = true;
                    }
                    
                    if (stepTwoPlayer){
                    String word = in_2.readLine(); // ждём пока клиент что-нибудь нам напишет
                    if ("exit".equals(word)){ 
                        jTextArea1.append("Клиенты отключились!\n");
                        clientSocket1.close();
                        in_1.close();
                        out_1.close();
                        clientSocket2.close();
                        in_2.close();
                        out_2.close(); 
                        break;
                    }
                    
                    send_1(word);
                    stepOnePlayer = true;
                    stepTwoPlayer = false;
                    }
                }
                jTextArea1.append("Сервер отключился!\n");
                server.close();
            
            }
        catch (IOException e)
        {
            System.err.println(e);
        }
            }
        };
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Run");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        thread.start();
                
    }//GEN-LAST:event_jButton1ActionPerformed
    private void send_1(String msg) {
    try {
        out_1.write(msg + "\n");
        out_1.flush();
    } catch (IOException ignored) {}
}
    private void send_2(String msg) {
    try {
        out_2.write(msg + "\n");
        out_2.flush();
    } catch (IOException ignored) {}
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
